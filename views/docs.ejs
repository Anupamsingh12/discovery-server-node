<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Service Registry User Guide</title>
    <style>
      body {
        font-family: "Arial", sans-serif;
        background-color: #f4f7fc;
        color: #333;
        margin: 0;
        padding: 0;
      }

      header {
        background-color: #924017;
        color: #fff;
        padding: 20px;
        text-align: center;
      }

      h1 {
        font-size: 2.5rem;
        margin: 0;
      }

      .content {
        padding: 40px 20px;
        max-width: 1200px;
        margin: 0 auto;
      }

      h2 {
        font-size: 1.8rem;
        color: #924017;
        margin-top: 40px;
        border-bottom: 2px solid #924017;
        padding-bottom: 5px;
      }

      h3 {
        font-size: 1.5rem;
        color: #333;
        margin-top: 20px;
      }

      p,
      ul,
      ol {
        font-size: 1.1rem;
        line-height: 1.6;
      }

      pre {
        background-color: #ececec;
        padding: 15px;
        border-radius: 5px;
        font-family: "Courier New", Courier, monospace;
        margin: 10px 0;
        white-space: pre-wrap;
        word-wrap: break-word;
      }

      ul,
      ol {
        margin-left: 20px;
      }

      .example {
        background-color: #f9f9f9;
        padding: 20px;
        border-left: 4px solid #924017;
        margin-bottom: 30px;
      }

      .footer {
        text-align: center;
        padding: 20px;
        background-color: #333;
        color: white;
        margin-top: 40px;
      }

      .btn {
        display: inline-block;
        background-color: #924017;
        color: white;
        padding: 10px 20px;
        text-decoration: none;
        border-radius: 5px;
        margin-top: 30px;
        font-size: 1rem;
      }

      .btn:hover {
        background-color: #004999;
      }

      .section {
        margin-bottom: 40px;
      }

      .note {
        background-color: #fff3cd;
        border-left: 4px solid #ffeeba;
        padding: 15px;
        margin-top: 20px;
        font-size: 1.1rem;
      }
    </style>
  </head>
  <body>
    <header>
      <h1>Service Registry User Guide</h1>
      <p>
        Your one-stop guide for understanding and using the Discovery Server
        Node in your project.
      </p>
    </header>

    <div class="content">
      <!-- Section 1: Introduction -->
      <div class="section">
        <h2>1. Introduction</h2>
        <p>
          The **Discovery Server Node** is a centralized service registry that
          allows services to register, deregister, update their heartbeats, and
          discover other services in a distributed system. It is essential for
          microservice architectures where services need to dynamically find and
          communicate with each other.
        </p>
        <p>
          This guide will walk you through setting up and using the Discovery
          Server Node, including registering services, heartbeats, and service
          discovery.
        </p>
      </div>

      <!-- Section 2: Installation and Setup -->
      <div class="section">
        <h2>2. Installation and Setup</h2>
        <h3>Step 1: Install the Discovery Server Node Package</h3>
        <p>Install the package for the Discovery Server:</p>
        <pre>npm install discovery-server-node</pre>

        <h3>Step 2: Start the Discovery Server</h3>
        <p>
          In your Express app, import the package and start the Discovery
          Server:
        </p>
        <pre>
const { DiscoveryServer } = require("discovery-server-node");
const discovery = new DiscoveryServer();
discovery.start();
        </pre>

        <h3>Step 3: Register a Service</h3>
        <p>To register a service instance with the Discovery Server:</p>
        <pre>
const { ServiceRegistory } = require("discovery-server-node");

const express = require("express");
const app = express();
const discoveryServerUrl = "http://localhost:4439"; // Discovery server URL
const serviceName = "USER_SERVICE";  // Service name
const port = 4000;

const userService = new ServiceRegistory(app, port, discoveryServerUrl, serviceName);
app.listen(port, () => {
  console.log(`App is running on http://localhost:${port}`);
});
        </pre>
      </div>

      <!-- Section 3: API Routes -->
      <div class="section">
        <h2>3. API Endpoints</h2>
        <p>The Discovery Server exposes the following API endpoints:</p>
        <ul>
          <li>
            <strong>GET /services</strong>: Fetches the list of all registered
            services and their instances.
          </li>
          <li>
            <strong>POST /registerService</strong>: Registers a new service
            instance.
          </li>
          <li>
            <strong>POST /deregisterService</strong>: Deregisters a specific
            service instance.
          </li>
          <li>
            <strong>POST /heartbeat</strong>: Updates the heartbeat of a service
            instance.
          </li>
          <li>
            <strong>GET /healthCheck</strong>: Health check endpoint to verify
            the service is running.
          </li>
        </ul>

        <h3>Example Requests:</h3>
        <div class="example">
          <h4>Register a Service:</h4>
          <pre>
POST /registerService
{
  "serviceName": "exampleService",
  "host": "localhost",
  "port": 3000,
  "instanceId": "1"
}
          </pre>

          <h4>Heartbeat Update:</h4>
          <pre>
POST /heartbeat
{
  "serviceName": "exampleService",
  "instanceId": "1"
}
          </pre>

          <h4>View Registered Services:</h4>
          <pre>
GET /services
          </pre>
        </div>
      </div>

      <!-- Section 4: Configuration -->
      <div class="section">
        <h2>4. Configuration</h2>
        <p>
          The configuration for the Discovery Server is stored in the
          `discovery-server-node` installation. You can modify settings like
          server port, TTL (time-to-live), and more in the configuration file.
        </p>

        <h3>Example Configuration:</h3>
        <pre>
module.exports = {
  server: {
    port: process.env.PORT || 3001,
  },
  cache: {
    ttl: process.env.CACHE_TTL || 86400,  // Default TTL in seconds
  },
  routes: {
    services: "/services",
    registerService: "/registerService",
    deregisterService: "/deregisterService",
    heartbeat: "/heartbeat",
    healthCheck: "/healthCheck",
  },
};
        </pre>
      </div>

      <!-- Section 5: Usage in an Existing Project -->
      <div class="section">
        <h2>5. Usage in an Existing Project</h2>
        <p>
          To integrate the Discovery Server Node into your existing project:
        </p>
        <ol>
          <li>
            Install the required dependencies:
            <code>npm install discovery-server-node</code>.
          </li>
          <li>
            Configure the server and routes as shown above in your `app.js`
            file.
          </li>
          <li>
            Use the service registry API to register services, update
            heartbeats, and manage your service instances.
          </li>
        </ol>
      </div>

      <!-- Footer -->
      <div class="footer">
        <p>&copy; 2025 Service Registry Documentation. All Rights Reserved.</p>
        <a href="/docs" class="btn">Back to Documentation</a>
      </div>
    </div>
  </body>
</html>

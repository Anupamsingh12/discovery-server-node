<!-- views/userGuide.ejs -->
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Service Registry User Guide</title>
    <style>
      body {
        font-family: "Arial", sans-serif;
        background-color: #f4f7fc;
        color: #333;
        margin: 0;
        padding: 0;
      }

      header {
        background-color: #924017;
        color: #fff;
        padding: 20px;
        text-align: center;
      }

      h1 {
        font-size: 2.5rem;
        margin: 0;
      }

      .content {
        padding: 40px 20px;
        max-width: 1200px;
        margin: 0 auto;
      }

      h2 {
        font-size: 1.8rem;
        color: #924017;
        margin-top: 40px;
        border-bottom: 2px solid #924017;
        padding-bottom: 5px;
      }

      h3 {
        font-size: 1.5rem;
        color: #333;
        margin-top: 20px;
      }

      p,
      ul,
      ol {
        font-size: 1.1rem;
        line-height: 1.6;
      }

      pre {
        background-color: #ececec;
        padding: 15px;
        border-radius: 5px;
        font-family: "Courier New", Courier, monospace;
        margin: 10px 0;
        white-space: pre-wrap;
        word-wrap: break-word;
      }

      ul,
      ol {
        margin-left: 20px;
      }

      .example {
        background-color: #f9f9f9;
        padding: 20px;
        border-left: 4px solid #924017;
        margin-bottom: 30px;
      }

      .footer {
        text-align: center;
        padding: 20px;
        background-color: #333;
        color: white;
        margin-top: 40px;
      }

      .btn {
        display: inline-block;
        background-color: #924017;
        color: white;
        padding: 10px 20px;
        text-decoration: none;
        border-radius: 5px;
        margin-top: 30px;
        font-size: 1rem;
      }

      .btn:hover {
        background-color: #004999;
      }

      .section {
        margin-bottom: 40px;
      }

      .note {
        background-color: #fff3cd;
        border-left: 4px solid #ffeeba;
        padding: 15px;
        margin-top: 20px;
        font-size: 1.1rem;
      }
    </style>
  </head>
  <body>
    <header>
      <h1>Service Registry User Guide</h1>
      <p>
        Your one-stop guide for understanding and using the Service Registry in
        your project.
      </p>
    </header>

    <div class="content">
      <!-- Section 1: Introduction -->
      <div class="section">
        <h2>1. Introduction</h2>
        <p>
          The Service Registry is a centralized place to manage your services in
          a distributed system. It allows microservices to register themselves,
          send heartbeats, and update their status in the registry. This makes
          it easier to discover, track, and manage services dynamically.
        </p>
        <p>
          This registry can be used to register service instances with their
          respective IPs, ports, and other metadata, ensuring that you can
          always reach a valid service instance even as instances scale up or
          down.
        </p>
      </div>

      <!-- Section 2: Installation and Setup -->
      <div class="section">
        <h2>2. Installation and Setup</h2>

        <h3>Step 1: Install Required Dependencies</h3>
        <p>To get started, install the necessary dependencies:</p>
        <pre>npm install express node-cache dotenv</pre>

        <h3>Step 2: Set Up Your Environment Configuration</h3>
        <p>
          Create a `.env` file in the root directory of your project and set the
          following environment variables:
        </p>
        <pre>
PORT=3001
CACHE_TTL=86400  # TTL in seconds (default is 24 hours)
      </pre
        >

        <h3>Step 3: Configure Your Application</h3>
        <p>Configure your app in the `app.js` file:</p>
        <pre>
const express = require('express');
const NodeCache = require('node-cache');
const dotenv = require('dotenv');
dotenv.config();

// Initialize express and service registry cache
const app = express();
const port = process.env.PORT || 3001;
const cacheTTL = process.env.CACHE_TTL || 86400;
const serviceRegistry = new NodeCache({ stdTTL: cacheTTL });

// Define your routes...
      </pre
        >
      </div>

      <!-- Section 3: API Routes -->
      <div class="section">
        <h2>3. API Routes</h2>
        <p>
          The service registry exposes the following API routes for managing
          service instances:
        </p>
        <ul>
          <li>
            <strong>GET /services</strong>: Fetches the list of all registered
            services and their instances.
          </li>
          <li>
            <strong>POST /register/:serviceName</strong>: Registers a new
            service instance with details like `host`, `port`, and `instanceId`.
          </li>
          <li>
            <strong>POST /deregister/:serviceName/:instanceId</strong>:
            Deregisters a specific service instance using its `instanceId`.
          </li>
          <li>
            <strong>POST /heartbeat/:serviceName/:instanceId</strong>: Updates
            the heartbeat of a registered service instance.
          </li>
          <li>
            <strong>GET /health</strong>: Health check endpoint to verify the
            registry is running.
          </li>
        </ul>

        <h3>Example Requests:</h3>
        <div class="example">
          <h4>Register a Service:</h4>
          <pre>
POST /register/my-service
{
  "host": "127.0.0.1",
  "port": "8080",
  "instanceId": "instance-001"
}
        </pre
          >

          <h4>Heartbeat Update:</h4>
          <pre>
POST /heartbeat/my-service/instance-001
        </pre
          >

          <h4>View Registered Services:</h4>
          <pre>
GET /services
        </pre
          >
        </div>
      </div>

      <!-- Section 4: Configuration -->
      <div class="section">
        <h2>4. Configuration</h2>
        <p>
          Configuration for the service registry is stored in the
          `config/config.js` file. Here you can modify the server settings,
          cache TTL, paths, and routes.
        </p>

        <h3>Example Configuration:</h3>
        <pre>
module.exports = {
  server: {
    port: process.env.PORT || 3001,
  },
  cache: {
    ttl: process.env.CACHE_TTL || 86400,
  },
  paths: {
    viewsFolder: "views",
  },
  routes: {
    services: "/services",
    registerService: "/register/:serviceName",
    deregisterService: "/deregister/:serviceName/:instanceId",
    heartbeat: "/heartbeat/:serviceName/:instanceId",
    healthCheck: "/health",
  },
};
      </pre
        >

        <div class="note">
          <strong>Note:</strong> You can modify the routes directly in the
          configuration file if necessary. Ensure that new routes do not
          conflict with existing ones in your application.
        </div>
      </div>

      <!-- Section 5: Usage in Existing Project -->
      <div class="section">
        <h2>5. Usage in an Existing Project</h2>
        <p>To integrate the service registry into an existing project:</p>
        <ol>
          <li>
            Install the necessary dependencies:
            <code>npm install express node-cache dotenv</code>.
          </li>
          <li>
            Copy the `config/config.js` and `app.js` files into your project.
          </li>
          <li>
            Modify the configuration as needed (e.g., port number, TTL, routes).
          </li>
          <li>Run your application using <code>node app.js</code>.</li>
          <li>
            Start using the registry API to register services, update
            heartbeats, and manage your services dynamically.
          </li>
        </ol>
      </div>

      <!-- Footer -->
      <div class="footer">
        <p>&copy; 2025 Service Registry Documentation. All Rights Reserved.</p>
        <a href="/docs" class="btn">Back to Documentation</a>
      </div>
    </div>
  </body>
</html>
